shebang for ruby: #!/usr/bin/ruby
# Naming convention
start with
0. lower case: local variable, method name, method params
1. underscore: same as above
2. $: global variables
3. @: instance variables
4. @@: class variables
5. Upper case: class, module, constant

following initial character, name can have any combination of letters, digits, and underscores

multiword names
0. instance variables: separate words with underscore
1. class names: Mixed cases

method names can end with ?, ! and =


#String
double quotes "ex" ruby does substituion and interpolation. substitues backslashes such as \n, interpolates expressions #{expressions}.
single quotes 'ex' ruby does minimal amount of work.

#puts vs p
if to_s is not implemented puts only prints #<ClassName, UniqueId> for an object
p prints internal fields of an object

# array
a = [ 1, 2, 3, 4, 5 ]
# access array using [] operator
# last index = -1
a[-1]
a[-99] #nil

#[start_index, element_count]
a[1, 3]

#[start_index..end_index]
a[1..3]

#assign
a = [1, 3, 5, 7, 9]
a[1] = 'bat'
a[-3] = 'cat'
a[3] = [9, 8] #add an array on index 3

a = [ 1, 3, 5, 7, 9 ]
a[2, 2] = 'cat'
a[2, 0] = 'dog'
a[1, 1] = [9, 8, 7]
a[0..3] = []
a[5..6] = 99, 98

#hash
ruby retrives elements in the order they were inserted.

#block
block can be {} or do end
blocks can only appear after method parameters of a function.
# closure for block
sum = 0
[1, 2, 3, 4].each do |value|
	sum += value
end
the sum variable above are the same in inside the block and outside of it.
there are ways to let ruby know that we don't want the variable outside the block in inside the loop
# declare the variable as parameter to block
value = "some value"
[ 1, 2 ].each {|value| puts value }

# declare local variables
square = "some shape"
sum = 0
[1, 2, 3, 4].each do |value; square|
	square = value * value
	sum += square
end

# iterators
methods: map/collect, each, inject(works as reduce), find 

:: each iterator
f = file.open('testfile')
f.each do |line|
	puts "the line is #{line}"
end

if we need to know how many times it's iterating
f.each.with_index do |line, index|
	puts "Line #{index} is #{line}"
end
f.close

:: inject iterator
a = [1, 2, 3, 4, 5]
total = a.inject(0) {|sum, elem| sum + element} #initially sum = 0

total = a.inject {|sum, elem| sum + elem} #initially sum = a[0]

total = a.inject(:+) #applies + method to all the elemens of a

# creating external enumerators
a = [1, 2, 3, 'cat']
h = {dog: 'canine', fox: "vulpine"}

enum_a = a.to_enum
enum_h = h.to_enum

enum_a.next => 1
enum_h.next => [:dog, "canine"]

the loop method can iteratre over enum, it will stop when the enum has no more values
loop do
	puts #{enum.next}
end

# Modules
provides a namespace and prevent name clashes.
supports mixin facility.

